{"version":3,"sources":["Components/GetRandom.jsx","App.js","reportWebVitals.js","index.js"],"names":["GetRandom","rowNum","useState","fakeData","setFakeData","ITEMS_COUNT","style","display","flex","height","isRowLoaded","index","loadMoreRows","startIndex","stopIndex","Promise","resolve","console","log","faker","locale","arrFakeData","Array","fill","map","name","firstName","lastName","avatar","internet","jobTitle","company","companyName","rowCount","onRowsRendered","registerChild","width","rowHeight","ref","rowRenderer","key","data","newStyle","className","src","class","alt","App","input","setInput","type","value","placeholder","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAIe,SAASA,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAChC,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBA,IAAMC,GAAeJ,EAmBrB,OACI,qBAAKK,MAAO,CAAEC,QAAS,QAAvB,SACI,qBAAKD,MAAO,CAAEE,KAAM,WAAYC,OAAQ,SAAxC,SACI,cAAC,IAAD,CACIC,YA1BhB,YAAiC,IAAVC,EAAS,EAATA,MACnB,QAASR,EAASQ,IA0BNC,aAtBhB,YACI,OAD6C,EAAzBC,WAAyB,EAAbC,UACzB,IAAIC,SAAQ,SAACC,GAChBC,QAAQC,IAAI,YAAab,GACzBc,IAAMC,OAAS,SACf,IAAMC,EAAcC,MAAMjB,GAAakB,KAAK,MAAMC,KAAI,WAClD,MAAO,CACHC,KAAK,GAAD,OAAKN,IAAMM,KAAKC,YAAhB,YAA+BP,IAAMM,KAAKE,YAC9CC,OAAO,GAAD,OAAKT,IAAMU,SAASD,UAC1BE,SAAS,GAAD,OAAKX,IAAMM,KAAKK,WAAhB,aAA+BX,IAAMY,QAAQC,mBAG7D5B,EAAYiB,GACZJ,QAAQC,IAAIf,GACZa,EAAQK,OAUAY,SAAU5B,EAHd,SAKK,gBAAG6B,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,cAAnB,OACG,cAAC,IAAD,UAEK,YAAwB,IAArB1B,EAAoB,EAApBA,OAAQ2B,EAAY,EAAZA,MAER,OACI,cAAC,IAAD,CACI3B,OAAQA,EACRwB,SAAU5B,EACVgC,UAAW,IACXD,MAAOA,EACPF,eAAgBA,EAChBI,IAAKH,EACLI,YAAa,YAA4B,IAAzBC,EAAwB,EAAxBA,IAAK7B,EAAmB,EAAnBA,MAAOL,EAAY,EAAZA,MAClBmC,EAAOtC,EAASQ,GAChB+B,EAAWpC,EAEjB,cADOoC,EAAQ,MAEX,sBAAeC,UAAU,MAAMrC,MAAOoC,EAAtC,UACI,uBACA,sBAAKC,UAAU,yBAAf,UACI,qBAAKC,IAAKH,GAAQA,EAAKb,OAAQiB,MAAM,eAAeC,IAAI,QACxD,sBAAKD,MAAM,YAAX,UACI,oBAAIA,MAAM,aAAV,SAAwBJ,GAAQA,EAAKhB,OACrC,mBAAGoB,MAAM,YAAT,SAAsBJ,GAAQA,EAAKX,iBAG3C,yBATMU,gB,QC3C3CO,MAvBf,WACE,MAA0B7C,mBAAS,IAAnC,mBAAO8C,EAAP,KAAcC,EAAd,KACA,OACE,qBAAKN,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,mCACE,4DACA,uBACA,uBACEO,KAAK,SACLC,MAAOH,EACPL,UAAU,oBACVS,YAAY,uBACZC,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOJ,UAErC,0BAEF,cAACnD,EAAD,CAAWC,OAAQ+C,UCRZQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.53cd4594.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { InfiniteLoader, List, AutoSizer } from 'react-virtualized';\r\nimport 'react-virtualized/styles.css'; // only needs to be imported once\r\nimport faker from 'faker';\r\nexport default function GetRandom({ rowNum }) {\r\n    const [fakeData, setFakeData] = useState([])\r\n    /* useEffect(() => {\r\n        const genData = () => {\r\n            faker.locale = \"en_IND\";\r\n            const arrFakeData = Array(100).fill(null).map(() => {\r\n                return {\r\n                    name: `${faker.name.firstName()} ${faker.name.lastName()}`,\r\n                    avatar: `${faker.internet.avatar()}`,\r\n                    jobTitle: `${faker.name.jobTitle()}`,\r\n                }\r\n            })\r\n            setFakeData(arrFakeData)\r\n            console.log(fakeData)\r\n        }\r\n        genData()\r\n    }, []) */\r\n    function isRowLoaded({ index }) {\r\n        return !!fakeData[index];\r\n    }\r\n    const ITEMS_COUNT = +rowNum\r\n    const ITEM_SIZE = 250\r\n    function loadMoreRows({ startIndex, stopIndex }) {\r\n        return new Promise((resolve) => {\r\n            console.log(\"Row count\", ITEMS_COUNT)\r\n            faker.locale = \"en_IND\";\r\n            const arrFakeData = Array(ITEMS_COUNT).fill(null).map(() => {\r\n                return {\r\n                    name: `${faker.name.firstName()} ${faker.name.lastName()}`,\r\n                    avatar: `${faker.internet.avatar()}`,\r\n                    jobTitle: `${faker.name.jobTitle()}, ${faker.company.companyName()}`,\r\n                }\r\n            })\r\n            setFakeData(arrFakeData)\r\n            console.log(fakeData)\r\n            resolve(arrFakeData)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex' }}>\r\n            <div style={{ flex: '1 1 auto', height: '100vh' }}>\r\n                <InfiniteLoader\r\n                    isRowLoaded={isRowLoaded}\r\n                    loadMoreRows={loadMoreRows}\r\n                    rowCount={ITEMS_COUNT}\r\n                >\r\n                    {({ onRowsRendered, registerChild }) => (\r\n                        <AutoSizer>\r\n\r\n                            {({ height, width }) => {\r\n\r\n                                return (\r\n                                    <List\r\n                                        height={height}\r\n                                        rowCount={ITEMS_COUNT}\r\n                                        rowHeight={430}\r\n                                        width={width}\r\n                                        onRowsRendered={onRowsRendered}\r\n                                        ref={registerChild}\r\n                                        rowRenderer={({ key, index, style }) => {\r\n                                            const data = fakeData[index]\r\n                                            const newStyle = style\r\n                                            delete newStyle[\"width\"]\r\n                                            return (\r\n                                                <div key={key} className=\"Row\" style={newStyle}>\r\n                                                    <br />\r\n                                                    <div className=\"card mx-auto my-3 w-18\">\r\n                                                        <img src={data && data.avatar} class=\"card-img-top\" alt=\"...\" />\r\n                                                        <div class=\"card-body\">\r\n                                                            <h5 class=\"card-title\">{data && data.name}</h5>\r\n                                                            <p class=\"card-text\">{data && data.jobTitle}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <br />\r\n\r\n                                                </div>\r\n\r\n                                            )\r\n                                        }}\r\n                                    />\r\n                                )\r\n\r\n\r\n                            }}\r\n                        </AutoSizer>\r\n                    )}\r\n\r\n                </InfiniteLoader>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\nimport GetRandom from \"./Components/GetRandom\";\nimport \"./App.css\";\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <div className=\" mt-5\">\n        <center>\n          <h2>View n Number Of Data List</h2>\n          <br />\n          <input\n            type=\"number\"\n            value={input}\n            className=\"form-control w-50\"\n            placeholder=\"Enter Number Of List\"\n            onChange={(e) => setInput(e.target.value)}\n          />\n          <br />\n        </center>\n        <GetRandom rowNum={input} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}